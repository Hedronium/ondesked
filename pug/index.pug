extends base.pug

block content
    div#intro
        div.container
            div.row
                div.col-sm
                    h1 Ondesked

                    h3
                        u.
                            A markup language for developing GUI of desktop apps.

            div#transition.mt-5.row
                div.col-lg
                    pre
                        code.html
                            = '<app id="adder">'
                            br
                            = '\t<frame class="centered visible" title="Adder">'
                            br
                            = '\t\t<box_sizer class="vertical fit-parent">'
                            br
                            = '\t\t\t<text padding="lrt-20">Result: 0</text>'
                            br
                            = '\t\t\t<textfield padding="lrt-20">0</textfield>'
                            br
                            = '\t\t\t<textfield padding="lrt-20">0</textfield>'
                            br
                            = '\t\t\t<button padding="xy-20">Add</button>'
                            br
                            = '\t\t</box_sizer>'
                            br
                            = '\t</frame>'
                            br
                            = '</app>'

                div.col-lg.col-arrow
                    i.fas.fa-long-arrow-alt-right
                    i.fas.fa-long-arrow-alt-down

                div.col-lg
                    img(src="img/gui.png")

            div.row
                div.col
                    include menu

    div#about.mt-5
        div.container
            h1 About

            h3 Transpiles to C++
            p.
                Ondesked transpiles to a C++ app, resulting in good performance, and allows you to use the existing, huge ecosystem of C++.

            h3 Cross-Platform
            p.
                The C++ app generated by Ondesked uses wxWidgets for the GUI, making it cross-platform and native, since wxWidgets makes native API calls to the underlying OS.

            h3 Flexible
            p.
                The app generated by Ondesked can be easily merged with an existing C++ app, or extended with C++ through "ports."

            h3 HTML for Desktop Apps
            p.
                It's based on XML, and is similar to HTML. Ondesked can be seen as the "HTML for desktop Apps!"

            h3 Generate the View, Code the Rest
            p.
                Ondesked is used for building the view of your desktop app. View, in this case, is basically the GUI of your app. You can code C++ for building the rest of your app (event handling, etc).

    div#example.mt-5
        div.container
            h1 Example

            h3 Ondesked Code

            p.
                Here's some Ondesked code:

            pre
                code.html
                    = '<app id="adder">'
                    br
                    = '\t<frame class="centered visible" title="Adder">'
                    br
                    = '\t\t<box_sizer class="vertical fit-parent">'
                    br
                    = '\t\t\t<text padding="lrt-20">Result: 0</text>'
                    br
                    = '\t\t\t<textfield padding="lrt-20">0</textfield>'
                    br
                    = '\t\t\t<textfield padding="lrt-20">0</textfield>'
                    br
                    = '\t\t\t<button padding="xy-20">Add</button>'
                    br
                    = '\t\t</box_sizer>'
                    br
                    = '\t</frame>'
                    br
                    = '</app>'

            h3 Generated C++ Code

            p.
                After compilation of the code above, the app will be generated, which will be consisting of multiple files. Here's the main C++ file:

            pre
                code.cpp.
                    #include "types.h"

                    IMPLEMENT_APP(Adder)

                    bool Adder::OnInit()
                    {
                        frame2 = new wxFrame(NULL, wxID_ANY, wxT("Adder"), wxDefaultPosition, wxDefaultSize);

                        frame2->Center();
                        frame2->Show(true);

                        box_sizer3 = new wxBoxSizer(wxVERTICAL);

                        frame2->SetSizer(box_sizer3);

                        text4 = new wxStaticText(frame2, wxID_ANY, wxT("Result: 0"));

                        textfield5 = new wxTextCtrl(frame2, wxID_ANY, wxT("0"), wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);

                        textfield6 = new wxTextCtrl(frame2, wxID_ANY, wxT("0"), wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);

                        button7 = new wxButton(frame2, wxID_ANY, wxT("Add"));

                        box_sizer3->Add(text4, 0, wxEXPAND | wxLEFT | wxRIGHT | wxTOP, 20);
                        box_sizer3->Add(textfield5, 0, wxEXPAND | wxLEFT | wxRIGHT | wxTOP, 20);
                        box_sizer3->Add(textfield6, 0, wxEXPAND | wxLEFT | wxRIGHT | wxTOP, 20);
                        box_sizer3->Add(button7, 0, wxEXPAND | wxLEFT | wxRIGHT | wxTOP | wxBOTTOM, 20);
                        frame2->GetSizer()->Fit(frame2);

                        Events::GetInstance()->SetApp(this);

                        port(this);

                        return true;
                    }

            h3 Result

            p.
                This is how the desktop application may look like after the code above is compiled:

            img(src="img/gui.png")